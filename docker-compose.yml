version: "3.9"

services:
  pg:
    image: postgres:16
    container_name: pg_local
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 20

  db_setup:
    image: postgres:16
    depends_on:
      pg:
        condition: service_healthy
    restart: "no"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      INIT_SQL: |
        -- =========================
        -- Enums (idempotent)
        -- =========================
        DO $$
        BEGIN
           IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'currency') THEN
              CREATE TYPE currency AS ENUM (
                'USD','EUR','GBP','JPY','CHF',
                'AUD','NZD','CAD','SGD','HKD','CNY','KRW','TWD','MYR','THB','VND','PHP','IDR','INR','LKR','NPR','BDT','PKR','MMK','KHR','LAK','BND',
                'SEK','NOK','DKK','PLN','CZK','HUF','RON','BGN','HRK','RSD','ISK','TRY','RUB','UAH',
                'AED','SAR','QAR','KWD','BHD','OMR','ILS','JOD','LBP','EGP','MAD','ZAR','NGN','GHS','KES','TZS','UGX','ETB','MUR',
                'MXN','BRL','ARS','CLP','COP','PEN','BOB','UYU','PYG','VES','JMD','TTD','BBD','BSD',
                'FJD','PGK','SBD','VUV','WST','TOP'
              );
           END IF;
        END $$;

        DO $$
        BEGIN
           IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'country') THEN
              CREATE TYPE country AS ENUM (
                'USA','CANADA','MEXICO',
                'UK','GERMANY','FRANCE','SPAIN','ITALY','NETHERLANDS','BELGIUM','SWITZERLAND','AUSTRIA','PORTUGAL','SWEDEN','NORWAY','DENMARK','FINLAND','POLAND','CZECH_REPUBLIC','HUNGARY','GREECE','IRELAND','ICELAND','LUXEMBOURG','CROATIA','SLOVENIA','SLOVAKIA','ROMANIA','BULGARIA','ESTONIA','LATVIA','LITHUANIA','MALTA','CYPRUS',
                'AUSTRALIA','NEW_ZEALAND','JAPAN','SOUTH_KOREA','CHINA','TAIWAN','HONG_KONG','SINGAPORE','MALAYSIA','THAILAND','VIETNAM','CAMBODIA','LAOS','MYANMAR','PHILIPPINES','INDONESIA','BRUNEI','INDIA','SRI_LANKA','BANGLADESH','NEPAL','BHUTAN','MALDIVES','PAKISTAN','AFGHANISTAN','MONGOLIA',
                'ISRAEL','PALESTINE','JORDAN','LEBANON','SYRIA','TURKEY','IRAN','IRAQ','SAUDI_ARABIA','UAE','QATAR','KUWAIT','BAHRAIN','OMAN','YEMEN',
                'SOUTH_AFRICA','EGYPT','MOROCCO','TUNISIA','ALGERIA','LIBYA','SUDAN','ETHIOPIA','KENYA','TANZANIA','UGANDA','RWANDA','GHANA','NIGERIA','SENEGAL','IVORY_COAST','CAMEROON','ZIMBABWE','BOTSWANA','NAMIBIA','ZAMBIA','MALAWI','MOZAMBIQUE','MADAGASCAR','MAURITIUS','SEYCHELLES',
                'BRAZIL','ARGENTINA','CHILE','PERU','COLOMBIA','VENEZUELA','ECUADOR','BOLIVIA','PARAGUAY','URUGUAY','GUYANA','SURINAME','FRENCH_GUIANA',
                'GUATEMALA','BELIZE','EL_SALVADOR','HONDURAS','NICARAGUA','COSTA_RICA','PANAMA','CUBA','JAMAICA','HAITI','DOMINICAN_REPUBLIC','PUERTO_RICO','TRINIDAD_AND_TOBAGO','BARBADOS','BAHAMAS',
                'FIJI','PAPUA_NEW_GUINEA','SOLOMON_ISLANDS','VANUATU','SAMOA','TONGA','PALAU','MICRONESIA','MARSHALL_ISLANDS','KIRIBATI','TUVALU','NAURU',
                'RUSSIA','UKRAINE','BELARUS','MOLDOVA','GEORGIA','ARMENIA','AZERBAIJAN','KAZAKHSTAN','UZBEKISTAN','TURKMENISTAN','KYRGYZSTAN','TAJIKISTAN','ALBANIA','BOSNIA_AND_HERZEGOVINA','SERBIA','MONTENEGRO','KOSOVO','NORTH_MACEDONIA'
              );
           END IF;
        END $$;

        -- =========================
        -- Tables
        -- =========================
        CREATE TABLE IF NOT EXISTS mad_level (
          id           SERIAL PRIMARY KEY,
          level_name   TEXT NOT NULL,
          level        INTEGER NOT NULL,
          description  TEXT NOT NULL,
          perks        JSONB[] NOT NULL
        );

        CREATE OR REPLACE FUNCTION set_updated_at()
        RETURNS TRIGGER AS $$
        BEGIN
          NEW.updated_at := NOW();
          RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

        CREATE TABLE IF NOT EXISTS customers (
          id                 SERIAL PRIMARY KEY,
          first_name         TEXT NOT NULL,
          last_name          TEXT NOT NULL,
          dob                DATE,
          country            country,
          email              TEXT NOT NULL UNIQUE,
          phone              TEXT UNIQUE,
          mad_level          INTEGER REFERENCES mad_level(id),
          profile_picture    TEXT,
          firebase_uid       TEXT UNIQUE,
          is_active          BOOLEAN DEFAULT TRUE,
          preferred_currency currency DEFAULT 'USD',
          created_at         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
          updated_at         TIMESTAMPTZ NOT NULL DEFAULT NOW()
        );

        DROP TRIGGER IF EXISTS trg_customers_set_updated_at ON customers;
        CREATE TRIGGER trg_customers_set_updated_at
        BEFORE UPDATE ON customers
        FOR EACH ROW
        EXECUTE FUNCTION set_updated_at();

        CREATE INDEX IF NOT EXISTS idx_customers_mad_level ON customers(mad_level);
        CREATE INDEX IF NOT EXISTS idx_customers_country   ON customers(country);
    command: >
      bash -lc '
      set -euo pipefail;
      until pg_isready -h pg -U "$POSTGRES_USER" >/dev/null 2>&1; do sleep 1; done;
      # Create appdb if missing
      psql -h pg -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname = '\''appdb'\''" | grep -q 1 \
        || psql -h pg -U "$POSTGRES_USER" -d postgres -c "CREATE DATABASE appdb";
      # Apply schema
      echo "$INIT_SQL" > /tmp/init.sql;
      psql -v ON_ERROR_STOP=1 -h pg -U "$POSTGRES_USER" -d appdb -f /tmp/init.sql;
      echo "âœ… Schema applied to appdb.";
      '

volumes:
  pgdata: {}
